import numpy as np


def commandvalue(line, letterpos, k):
    # Returns float value of each variable: deals with different numbers of decimal places
    if letterpos[k] == -1:
        return np.nan
    else:
        endpoint = min([pos for pos in letterpos[k+1:] if pos > 0])
        strvalue = line[letterpos[k]+1:endpoint]
        return float(strvalue)


def extractdata(line):
    # Extracts G, F, X, Y, Z, E values from a single line of gcode
    commands = np.zeros(6)
    commands[0] = line[1]
    letterpos = [line.find('F'), line.find('X'), line.find('Y'), line.find('Z'), line.find('E'), line.find('\n')]
    for i in range(5):
        commands[i+1] = commandvalue(line, letterpos, i)
    return commands


def extractgcode(inputfilestub, outputfilestub):
    # Read key data from gcode generated by cura and save as a list

    # Open existing gcode file and read lines
    filename = inputfilestub + '.gcode'
    file = open(filename, 'r')
    lines = file.readlines()

    printcommands = [np.zeros(6) for i in range(len(lines))]  # Initialise empty list to store commands
    # Each entry in the list will contain 6 values: G, F, X, Y, Z, E

    # Extract data from all commands between the first occurance of ';MESH' and 'M140 S0'
    n = 0
    extractcommands = False
    for line in lines:
        if line[0:5] == ';MESH':
            extractcommands = True
        elif line[0:7] == 'M140 S0':
            break
        elif line[0] != ';' and line != '\n' and extractcommands:
            printcommands[n] = extractdata(line)
            n += 1

    file.close()

    printcommands = printcommands[0:n]  # Remove zeros at end of command list

    for i in range(len(printcommands)):  # Make every command have an associated speed value
        if np.isnan(printcommands[i][1]):
            printcommands[i][1] = printcommands[i-1][1]

    outputfilename = outputfilestub + '.npy'
    np.save(outputfilename, printcommands)  # Save command list
